name: Build and Deploy Chatbot Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ensiyassine99-sys
  BACKEND_IMAGE: chatbot-backend
  FRONTEND_IMAGE: chatbot-frontend
  VITE_API_URL: https://api.srv789193.hstgr.cloud/api/v1
  VITE_WS_URL: ws://api.srv789193.hstgr.cloud

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.BACKEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.BACKEND_IMAGE }}:buildcache,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            VITE_API_URL=${{ env.VITE_API_URL }}
            VITE_WS_URL=${{ env.VITE_WS_URL }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.FRONTEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.FRONTEND_IMAGE }}:buildcache,mode=max

      - name: Image build summary
        run: |
          echo "‚úÖ Backend image: ${{ steps.meta-backend.outputs.tags }}"
          echo "‚úÖ Frontend image: ${{ steps.meta-frontend.outputs.tags }}"

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host ${{ secrets.SERVER_IP }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Prepare environment on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          echo 'Preparation de environnement...' &&
          mkdir -p ~/chatbot-app &&
          
          if [ -f ~/chatbot-app/docker-compose.yml ]; then
            rm -f ~/chatbot-app/docker-compose.yml
            echo '- docker-compose.yml supprime'
          fi &&
          
          rm -rf ~/chatbot-app/docker &&
          mkdir -p ~/chatbot-app/docker &&
          echo '- Repertoire docker reinitialise' &&
          
          rm -rf ~/chatbot-app/backend &&
          mkdir -p ~/chatbot-app/backend &&
          echo '- Repertoire backend reinitialise' &&
          
          mkdir -p ~/chatbot-app/database &&
          mkdir -p ~/chatbot-app/uploads &&
          mkdir -p ~/chatbot-app/logs &&
          echo '- Repertoires de donnees crees' &&
          
          echo 'Environnement prepare avec succes'
          "

      - name: Copy configuration files to server
        run: |
          echo "Copie des fichiers de configuration..."
          scp docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/chatbot-app/docker-compose.yml
          scp docker/nginx.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/chatbot-app/docker/nginx.conf
          scp backend/.env.production ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/chatbot-app/backend/.env
          echo "Fichiers copies avec succes"

      - name: Stop and remove existing containers
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          echo 'Gestion des conteneurs existants' &&
          
          APP_CONTAINERS=\$(docker ps -a --format '{{.Names}}' | grep -E 'chatbot-redis|chatbot-backend|chatbot-frontend|chatbot-nginx' || true) &&
          
          if [ -n \"\$APP_CONTAINERS\" ]; then
            echo 'Conteneurs existants trouves. Arret et suppression' &&
            
            for CONTAINER in \$APP_CONTAINERS; do
              echo \"- Arret de \$CONTAINER\" &&
              docker stop \$CONTAINER || true
            done &&
            
            for CONTAINER in \$APP_CONTAINERS; do
              echo \"- Suppression de \$CONTAINER\" &&
              docker rm \$CONTAINER || true
            done
          else
            echo 'Aucun conteneur trouve. Premier deploiement'
          fi &&
          
          echo 'Nettoyage des conteneurs inutilises' &&
          docker container prune -f
          "

      - name: Login to registry and deploy services
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          cd ~/chatbot-app &&
          echo 'Connexion au registre Docker...' &&
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login -u '${{ github.actor }}' --password-stdin '${{ env.DOCKER_REGISTRY }}' &&
          
          export COMPOSE_PROJECT_NAME=chatbot-app &&
          
          echo 'Telechargement des images...' &&
          JWT_SECRET='${{ secrets.JWT_SECRET }}' \
          JWT_REFRESH_SECRET='${{ secrets.JWT_REFRESH_SECRET }}' \
          SESSION_SECRET='${{ secrets.SESSION_SECRET }}' \
          COOKIE_SECRET='${{ secrets.COOKIE_SECRET }}' \
          GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
          HUGGINGFACE_API_KEY='${{ secrets.HUGGINGFACE_API_KEY }}' \
          DEEPSEEK_API_KEY='${{ secrets.DEEPSEEK_API_KEY }}' \
          GOOGLE_AI_API_KEY='${{ secrets.GOOGLE_AI_API_KEY }}' \
          SMTP_PASS='${{ secrets.SMTP_PASS }}' \
          docker-compose -f docker-compose.yml pull &&
          
          echo 'Demarrage des services...' &&
          JWT_SECRET='${{ secrets.JWT_SECRET }}' \
          JWT_REFRESH_SECRET='${{ secrets.JWT_REFRESH_SECRET }}' \
          SESSION_SECRET='${{ secrets.SESSION_SECRET }}' \
          COOKIE_SECRET='${{ secrets.COOKIE_SECRET }}' \
          GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
          HUGGINGFACE_API_KEY='${{ secrets.HUGGINGFACE_API_KEY }}' \
          DEEPSEEK_API_KEY='${{ secrets.DEEPSEEK_API_KEY }}' \
          GOOGLE_AI_API_KEY='${{ secrets.GOOGLE_AI_API_KEY }}' \
          SMTP_PASS='${{ secrets.SMTP_PASS }}' \
          docker-compose -f docker-compose.yml up -d &&
          
          echo 'Services demarres avec succes'
          "

      - name: Verify deployment
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          echo 'Verification des conteneurs...' &&
          sleep 30 &&
          
          echo 'Statut des conteneurs:' &&
          docker ps &&
          
          echo 'Nettoyage des images inutilisees...' &&
          docker image prune -f &&
          
          echo 'Deploiement termine avec succes'
          "

  notify:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: Check deployment result
        run: |
          if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üöÄ Deploiement complet reussi!"
            echo "‚úÖ Backend: ghcr.io/ensiyassine99-sys/chatbot-backend:latest"
            echo "‚úÖ Frontend: ghcr.io/ensiyassine99-sys/chatbot-frontend:latest"
            echo "üåê Application: http://srv789193.hstgr.cloud"
            echo "üîó API: http://srv789193.hstgr.cloud/api/v1"
          elif [ "${{ needs.build.result }}" == "failure" ]; then
            echo "‚ùå Echec du build des images"
            exit 1
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "‚ùå Echec du deploiement sur le serveur"
            exit 1
          else
            echo "‚ö†Ô∏è Workflow incomplet"
            exit 1
          fi