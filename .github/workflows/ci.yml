name: Deploy Chatbot Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Prepare environment on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          echo 'Preparation de environnement...' &&
          mkdir -p ~/chatbot-app &&
          
          if [ -f ~/chatbot-app/docker-compose.yml ]; then
            rm -f ~/chatbot-app/docker-compose.yml
            echo '- docker-compose.yml supprime'
          fi &&
          
          rm -rf ~/chatbot-app/docker &&
          mkdir -p ~/chatbot-app/docker &&
          echo '- Repertoire docker reinitialise' &&
          
          rm -rf ~/chatbot-app/backend &&
          mkdir -p ~/chatbot-app/backend &&
          echo '- Repertoire backend reinitialise' &&
          
          rm -rf ~/chatbot-app/frontend &&
          mkdir -p ~/chatbot-app/frontend &&
          echo '- Repertoire frontend reinitialise' &&
          
          mkdir -p ~/chatbot-app/database &&
          mkdir -p ~/chatbot-app/uploads &&
          mkdir -p ~/chatbot-app/logs &&
          echo '- Repertoires de donnees crees' &&
          
          echo 'Environnement prepare avec succes'
          "

      - name: Copy source code to server
        run: |
          echo "Copie du code source vers le serveur..."
          scp docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/chatbot-app/docker-compose.yml
          scp -r docker/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/chatbot-app/
          scp -r backend/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/chatbot-app/
          scp -r frontend/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/chatbot-app/
          echo "Code source copie avec succes"

      - name: Stop and remove existing containers
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          echo 'Gestion des conteneurs existants' &&
          
          APP_CONTAINERS=\$(docker ps -a --format '{{.Names}}' | grep -E 'chatbot-redis|chatbot-backend|chatbot-frontend|chatbot-nginx' || true) &&
          
          if [ -n \"\$APP_CONTAINERS\" ]; then
            echo 'Conteneurs existants trouves. Arret et suppression' &&
            
            for CONTAINER in \$APP_CONTAINERS; do
              echo \"- Arret de \$CONTAINER\" &&
              docker stop \$CONTAINER || true
            done &&
            
            for CONTAINER in \$APP_CONTAINERS; do
              echo \"- Suppression de \$CONTAINER\" &&
              docker rm \$CONTAINER || true
            done
          else
            echo 'Aucun conteneur trouve. Premier deploiement'
          fi &&
          
          echo 'Nettoyage des conteneurs inutilises' &&
          docker container prune -f
          "

      - name: Build and start services
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          cd ~/chatbot-app &&
          
          export COMPOSE_PROJECT_NAME=chatbot-app &&
          
          echo 'Construction et demarrage des services' &&
          docker-compose -f docker-compose.yml up -d --build &&
          
          echo 'Services demarres avec succes'
          "

      - name: Verify deployment
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          echo 'Verification des conteneurs' &&
          sleep 30 &&
          
          echo 'Statut des conteneurs:' &&
          docker ps &&
          
          echo 'Nettoyage des images inutilisees' &&
          docker image prune -f &&
          
          echo 'Deploiement termine avec succes'
          "

  notify:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Check deployment result
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "Deploiement reussi sur srv830042.hstgr.cloud"
            echo "Backend: http://srv830042.hstgr.cloud/api/v1"
            echo "Frontend: http://srv830042.hstgr.cloud"
          else
            echo "Echec du deploiement"
            exit 1
          fi
          