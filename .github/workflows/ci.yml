name: Build and Deploy Chatbot Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ensiyassine99-sys
  BACKEND_IMAGE: chatbot-backend
  FRONTEND_IMAGE: chatbot-frontend

jobs:
  # ==================== JOB 1: BUILD ====================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.BACKEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.BACKEND_IMAGE }}:buildcache,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.FRONTEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ env.FRONTEND_IMAGE }}:buildcache,mode=max

      - name: Image digest
        run: |
          echo "Backend: ${{ steps.meta-backend.outputs.tags }}"
          echo "Frontend: ${{ steps.meta-frontend.outputs.tags }}"

  # ==================== JOB 2: DEPLOY ====================
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Create deployment directory on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ~/chatbot-app/docker"

      - name: Copy docker-compose and configuration files
        run: |
          scp docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/chatbot-app/docker-compose.yml
          scp docker/nginx.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/chatbot-app/docker/

      - name: Create backend .env file on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            cd ~/chatbot-app
            
            # Créer le dossier backend s'il n'existe pas
            mkdir -p backend
            
            # Créer le fichier .env pour le backend
            cat > backend/.env << 'ENDENV'
# AI CHATBOT - BACKEND CONFIGURATION
# ============================================

# ------------------------------------------
# Server Configuration
# ------------------------------------------
NODE_ENV=production

PORT=5000
HOST=srv830042.hstgr.cloud
FRONTEND_URL=http://srv830042.hstgr.cloud

# CORS
ALLOWED_ORIGINS=http://srv830042.hstgr.cloud

# ------------------------------------------
# Google OAuth
# ------------------------------------------
GOOGLE_CLIENT_ID=112522573767-0bksqtlk33df3bon2n38s0719pvi35c8.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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
GOOGLE_CALLBACK_URL=http://srv830042.hstgr.cloud/api/v1/auth/google/callback

# Twitter OAuth
TWITTER_CONSUMER_KEY=votre-api-key
TWITTER_CONSUMER_SECRET=votre-api-secret
TWITTER_CALLBACK_URL=http://srv830042.hstgr.cloud/api/v1/auth/twitter/callback

# Session Secret
SESSION_SECRET=your-super-secret-session-key-change-in-production

# ------------------------------------------
# Database Configuration
# ------------------------------------------
DATABASE_URL=sqlite:./database/chatbot.db

# ------------------------------------------
# Redis Configuration
# ------------------------------------------
USE_REDIS=true
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Cookie settings
COOKIE_SECRET=your-super-secret-cookie-key-change-this-in-production

# ------------------------------------------
# JWT & Security
# ------------------------------------------
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
JWT_REFRESH_SECRET=your-refresh-secret-key-change-this-in-production
JWT_EXPIRE=15m
JWT_REFRESH_EXPIRE=7d

# Bcrypt
BCRYPT_ROUNDS=10

# Session
COOKIE_SECURE=false

# ------------------------------------------
# AI Models API Keys
# ------------------------------------------
# OpenAI
OPENAI_API_KEY=sk-...your-openai-api-key

# Google AI 
GOOGLE_AI_API_KEY=AIzaSyB8mckkmRwHBqyNHIzCB70DPFj2qdgzYM8

# Hugging Face
HUGGINGFACE_API_KEY=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

# DeepSeek 
DEEPSEEK_API_KEY=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
DEEPSEEK_API_URL=https://openrouter.ai/api/v1

# ------------------------------------------
# Email Configuration
# ------------------------------------------
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=yassine.assiani@ensi-uma.tn
SMTP_PASS=izrxkiedadmomlhe
EMAIL_FROM=AI Chatbot <noreply@example.com>

# ------------------------------------------
# Rate Limiting
# ------------------------------------------
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_AUTH_WINDOW_MS=900000
RATE_LIMIT_AUTH_MAX_REQUESTS=15

# ------------------------------------------
# File Upload
# ------------------------------------------
MAX_FILE_SIZE=10485760
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,application/pdf

# ------------------------------------------
# Logging
# ------------------------------------------
LOG_LEVEL=debug
LOG_FILE_PATH=./logs
LOG_MAX_FILES=14d
LOG_MAX_SIZE=20m

# ------------------------------------------
# Monitoring
# ------------------------------------------
SENTRY_DSN=
NEW_RELIC_LICENSE_KEY=
DATADOG_API_KEY=

# ------------------------------------------
# Feature Flags
# ------------------------------------------
ENABLE_SIGNUP=true
ENABLE_OAUTH=true
ENABLE_EMAIL_VERIFICATION=false
ENABLE_WEBSOCKET=true
ENABLE_FILE_UPLOAD=true
ENABLE_EXPORT=true

# ------------------------------------------
# API Limits
# ------------------------------------------
MAX_CHAT_HISTORY=100
MAX_MESSAGE_LENGTH=4000
MAX_MESSAGES_PER_CHAT=1000
MAX_CHATS_PER_USER=500
ENDENV
            
            echo "✅ Fichier backend/.env créé avec succès"
          ENDSSH

      - name: Login to GitHub Container Registry on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
          EOF

      - name: Pull latest images and restart services
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ~/chatbot-app
            
            # Arrêter les services existants
            docker-compose down
            
            # Supprimer les anciennes images
            docker image prune -f
            
            # Démarrer les services avec les nouvelles images
            docker-compose pull
            docker-compose up -d
            
            # Afficher le statut
            docker-compose ps
          EOF

      - name: Health check
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "Waiting for services to be healthy..."
            sleep 30
            
            cd ~/chatbot-app
            
            # Vérifier le statut des conteneurs
            if docker-compose ps | grep -q "Up (healthy)"; then
              echo "✅ Deployment successful! Services are healthy."
            else
              echo "⚠️ Warning: Some services may not be healthy yet."
              docker-compose ps
            fi
          EOF

      - name: Cleanup old Docker images
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker system prune -af --volumes --filter "until=48h"
          EOF

  # ==================== JOB 3: NOTIFICATION ====================
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🚀 Deployment réussi!"
          else
            echo "❌ Échec du déploiement"
            exit 1
          fi