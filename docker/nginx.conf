# =====================================================
# NGINX Configuration avec HTTPS
# =====================================================

events {
    worker_connections 1024;
}

http {
    # =====================================================
    # MIME Types & Defaults
    # =====================================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # =====================================================
    # Logging
    # =====================================================
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # =====================================================
    # Performance Settings
    # =====================================================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 20M;

    # =====================================================
    # Gzip Compression
    # =====================================================
    gzip on;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;

    # =====================================================
    # Upstream Servers
    # =====================================================
    upstream backend {
        server backend:5000;
        keepalive 32;
    }

    upstream frontend {
        server frontend:80;
        keepalive 16;
    }

    # =====================================================
    # HTTP → HTTPS Redirection
    # =====================================================
    server {
        listen 80;
        server_name srv789193.hstgr.cloud api.srv789193.hstgr.cloud;

        # Permettre la vérification Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Rediriger tout le reste vers HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # =====================================================
    # Default Server - Block Unknown Domains (HTTP)
    # =====================================================
    server {
        listen 80 default_server;
        server_name _;
        return 444;
    }

    # =====================================================
    # Default Server - Block Unknown Domains (HTTPS)
    # =====================================================
    server {
        listen 443 ssl default_server;
        server_name _;
        ssl_reject_handshake on;
        return 444;
    }

    # =====================================================
    # API BACKEND - api.srv789193.hstgr.cloud (HTTPS)
    # =====================================================
    server {
        listen 443 ssl http2;
        server_name api.srv789193.hstgr.cloud;

        # Configuration SSL
        ssl_certificate /etc/letsencrypt/live/srv789193.hstgr.cloud/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/srv789193.hstgr.cloud/privkey.pem;
        
        # Paramètres de sécurité SSL
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # En-têtes de sécurité
        add_header X-Server-Type "Backend-API" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        location / {
            # OPTIONS Preflight Request
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "https://srv789193.hstgr.cloud" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, Cookie, Set-Cookie, X-Requested-With" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age "86400" always;
                add_header Content-Type "text/plain; charset=utf-8" always;
                add_header Content-Length 0 always;
                return 204;
            }

            # CORS Headers for All Requests
            add_header Access-Control-Allow-Origin "https://srv789193.hstgr.cloud" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Expose-Headers "Content-Length, Content-Range, X-Total-Count, X-Page-Count" always;

            # Proxy Configuration
            proxy_pass http://backend;
            proxy_http_version 1.1;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Cookie $http_cookie;
            
            # Cookie Handling
            proxy_pass_header Set-Cookie;
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering
            proxy_buffering off;
            proxy_request_buffering off;
        }
    }

    # =====================================================
    # FRONTEND - srv789193.hstgr.cloud (HTTPS)
    # =====================================================
    server {
        listen 443 ssl http2;
        server_name srv789193.hstgr.cloud;

        # Configuration SSL
        ssl_certificate /etc/letsencrypt/live/srv789193.hstgr.cloud/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/srv789193.hstgr.cloud/privkey.pem;
        
        # Paramètres de sécurité SSL
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # En-têtes de sécurité
        add_header X-Server-Type "Frontend-React" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Block /api/* Routes
        location ~ ^/api(/|$) {
            default_type application/json;
            add_header Content-Type "application/json; charset=utf-8" always;
            return 403 '{"error":"API not available on this domain","message":"Use https://api.srv789193.hstgr.cloud"}';
        }

        # Static Assets with Caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|otf|map|webp|avif)$ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public, immutable" always;
            access_log off;
        }

        # React Router - Main Location
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Error Handling for React Router
            proxy_intercept_errors on;
            error_page 404 = @frontend_fallback;
        }

        # Fallback for React Router
        location @frontend_fallback {
            proxy_pass http://frontend;
        }
    }
}