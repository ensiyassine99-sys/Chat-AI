events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 20M;

    # Gzip
    gzip on;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;

    # Upstreams
    upstream backend {
        server backend:5000;
        keepalive 32;
    }

    upstream frontend {
        server frontend:80;
        keepalive 16;
    }

    # =====================================================
    # SÉCURITÉ: Bloquer domaines inconnus
    # =====================================================
    server {
        listen 80 default_server;
        server_name _;
        return 444;  # Fermer connexion sans réponse
    }

    # =====================================================
    # API BACKEND - api.localhost
    # ✅ CORS COMPLET pour OAuth + API calls
    # =====================================================
    server {
        listen 80;
        server_name api.localhost;
        
        # Header de debug
        add_header X-Server-Type "Backend-API" always;

        # =====================================================
        # GESTION PREFLIGHT OPTIONS (requêtes avant POST/PUT/DELETE)
        # =====================================================
        location / {
            # Si c'est une requête OPTIONS (preflight)
            if ($request_method = 'OPTIONS') {
                # CORS Headers complets
                add_header Access-Control-Allow-Origin "http://localhost" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, Cookie, Set-Cookie, X-Requested-With, Accept, Accept-Language" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age "86400" always;  # Cache 24h
                
                # Réponse vide
                add_header Content-Type "text/plain; charset=utf-8" always;
                add_header Content-Length 0 always;
                return 204;
            }

            # =====================================================
            # CORS pour TOUTES les autres requêtes (GET, POST, etc.)
            # =====================================================
            add_header Access-Control-Allow-Origin "http://localhost" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Expose-Headers "Content-Length, Content-Range, X-Total-Count, X-Page-Count" always;

            # =====================================================
            # PROXY vers Backend Express
            # =====================================================
            proxy_pass http://backend;
            proxy_http_version 1.1;
            
            # Headers standards
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Support WebSocket
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # ✅ IMPORTANT : Passer les cookies entre domaines
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            
            # ✅ Ne pas modifier les redirections (important pour OAuth)
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering (désactivé pour streaming)
            proxy_buffering off;
            proxy_request_buffering off;
        }
    }

    # =====================================================
    # FRONTEND - localhost
    # =====================================================
    server {
        listen 80;
        server_name localhost;
        
        # Header de debug
        add_header X-Server-Type "Frontend-React" always;

        # =====================================================
        # Bloquer /api/* (sauf si tu veux autoriser certaines routes)
        # =====================================================
        location ~ ^/api(/|$) {
            default_type application/json;
            add_header Content-Type "application/json; charset=utf-8" always;
            return 403 '{"error":"API not available on this domain","message":"Use http://api.localhost for API calls"}';
        }

        # =====================================================
        # Assets statiques avec cache agressif
        # =====================================================
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|otf|map|webp|avif)$ {
            proxy_pass http://frontend;
            
            # Cache navigateur 1 an
            expires 1y;
            add_header Cache-Control "public, immutable" always;
            
            # Pas de logs pour les assets
            access_log off;
        }

        # =====================================================
        # Toutes les autres routes → React Router
        # =====================================================
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Support WebSocket (pour React Hot Reload)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Support React Router (404 → index.html)
            proxy_intercept_errors on;
            error_page 404 = @frontend_fallback;
        }

        # Fallback pour React Router
        location @frontend_fallback {
            proxy_pass http://frontend;
        }
    }
}