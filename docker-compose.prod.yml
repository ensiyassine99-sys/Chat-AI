version: '3.8'

services:
  # Base de donn√©es Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpass}
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Node.js
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: chatbot-backend
    restart: unless-stopped
    expose:
      - "5000"
    env_file: 
      - ./backend/.env
    environment:
      - PORT=5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-defaultpass}
    volumes:
      - ./database:/app/database
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        - VITE_API_URL=http://api.localhost/api/v1
        - VITE_WS_URL=ws://api.localhost/ws
    container_name: chatbot-frontend
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:5000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: chatbot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:80/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 3

networks:
  chatbot-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local